/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.7).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.bibliotheque.api.service.api;

import com.bibliotheque.api.service.model.Reservation;
import org.threeten.bp.OffsetDateTime;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import javax.validation.Valid;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-08-11T23:01:18.100Z")

@Api(value = "reservations", description = "the reservations API")
public interface ReservationsApi {

    @ApiOperation(value = "Ajouter une nouvelle réservation", nickname = "addReservation", notes = "", tags={ "reservation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/reservations",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> addReservation(@ApiParam(value = "Un objet Reservation doit être envoyé pour être ajouté", required = true) @Valid @RequestBody Reservation body);


    @ApiOperation(value = "Supprimer un livre", nickname = "deleteReservation", notes = "", tags={ "reservation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "livre not found") })
    @RequestMapping(value = "/reservations/{reservationId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteReservation(@ApiParam(value = "ID du livre à supprimer", required = true) @PathVariable("reservationId") Long reservationId);


    @ApiOperation(value = "Trouver des réservations", nickname = "findReservations", notes = "Plusieurs valeurs peuvent être séparées par une virgule", response = Reservation.class, responseContainer = "List", tags={ "reservation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Reservation.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid status value") })
    @RequestMapping(value = "/reservations",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Reservation>> findReservations(@ApiParam(value = "Réservations faites sur l'id d'un livre", required = true) @PathVariable("livreId") Long livreId, @ApiParam(value = "Réservations faites par un utilisateur", required = true) @PathVariable("utilisateurId") Long utilisateurId, @ApiParam(value = "Réservations faites au de là d'une date", required = true) @PathVariable("dateDebut") OffsetDateTime dateDebut, @ApiParam(value = "Réservations faites au de là d'une date", required = true) @PathVariable("dateFin") OffsetDateTime dateFin);


    @ApiOperation(value = "Trouve une réservation par son ID", nickname = "getReservationById", notes = "Trouve une réservation par son ID", response = Reservation.class, tags={ "reservation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Reservation.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "livre not found") })
    @RequestMapping(value = "/reservations/{reservationId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Reservation> getReservationById(@ApiParam(value = "ID of livre to return", required = true) @PathVariable("reservationId") Long reservationId);


    @ApiOperation(value = "Mettre à jour un livre avec un form data", nickname = "updateReservation", notes = "", tags={ "reservation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/reservations/{reservationId}/renew",
        produces = { "application/json" }, 
        consumes = { "application/x-www-form-urlencoded" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateReservation(@ApiParam(value = "ID de la réservation qui doit être mise à jour", required = true) @PathVariable("reservationId") Long reservationId, @ApiParam(value = "Mettre à jour le nom du livre") @RequestParam(value = "livreId", required = false) Long livreId, @ApiParam(value = "Mettre à jour l'auteur d'un livre") @RequestParam(value = "utilisateurId", required = false) Long utilisateurId, @ApiParam(value = "Mettre à jour la quantité d'un livre") @RequestParam(value = "dateDebut", required = false) OffsetDateTime dateDebut, @ApiParam(value = "Mettre à jour la quantité d'un livre") @RequestParam(value = "dateFin", required = false) OffsetDateTime dateFin);

}
